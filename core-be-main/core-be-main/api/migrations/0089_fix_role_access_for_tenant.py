# Generated by Django 4.2.1 on 2023-10-20 07:14

from django.db import migrations

from api.utils.logger import logger


def seed_missing_mappings(apps, schema_editor):
    # Get the model classes
    Tenant = apps.get_model('api', 'Tenant')
    UserRole = apps.get_model('api', 'UserRole')
    FeatureList = apps.get_model('api', 'FeatureList')
    RoleFeatureMapping = apps.get_model('api', 'RoleFeatureMapping')

    # Your seeder data here
    all_features = {
        "Implementation Analyst": [
            {"name": "Users", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Account", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Opportunity", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Sync to Salesforce", "method": ["GET", "POST", "PUT"]},
            {"name": "Organizational Hierarchy", "method": ["GET", "POST", "PUT"]},
            {"name": "Price Book", "method": ["GET", "PUT", "POST", "DELETE"]},
            {"name": "Deal Hub", "method": ["GET", "PUT"]},
            {"name": "Price Book Rule", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Price Book Discount", "method": ["GET", "POST", "PUT"]},
            {"name": "Quote Approval", "method": ["PUT"]},
            {"name": "Template Management", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Product", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Feature Repository", "method": ["GET", "POST"]},
            {"name": "Feature", "method": ["GET", "PUT", "PATCH", "DELETE"]},
            {"name": "Feature Group", "method": ["PATCH", "PUT", "DELETE"]},
            {"name": "Plan", "method": ["GET", "POST", "PATCH", "DELETE"]},
            {"name": "Package", "method": ["GET", "POST", "PUT"]},
            {"name": "Pricing Model", "method": ["GET", "POST", "PUT"]},
            {"name": "Pricing Calculator", "method": ["GET", "POST", "PUT"]},
            {"name": "Deal Terms", "method": ["GET", "PUT"]}
        ],
        "Deal Desk": [
            {"name": "Price Book", "method": ["GET", "PUT", "POST", "DELETE"]},
            {"name": "Deal Hub", "method": ["GET", "PUT"]},
            {"name": "Price Book Rule", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Pricing Calculator", "method": ["GET", "PUT"]},
            {"name": "Price Book Discount", "method": ["GET", "POST", "PUT"]},
            {"name": "Quote Approval", "method": ["PUT"]},
            {"name": "Template Management", "method": ["GET", "POST", "PUT", "DELETE"]}
        ],
        "Product Owner": [
            {"name": "Product", "method": ["GET", "POST", "PUT", "DELETE"]},
            {"name": "Feature Repository", "method": ["GET", "POST"]},
            {"name": "Feature", "method": ["GET", "PUT", "PATCH", "DELETE"]},
            {"name": "Feature Group", "method": ["PATCH", "PUT", "DELETE"]},
            {"name": "Plan", "method": ["GET", "POST", "PATCH", "DELETE"]},
            {"name": "Package", "method": ["GET", "POST", "PUT"]},
            {"name": "Pricing Model", "method": ["GET", "POST", "PUT"]},
        ],
        "Quote Approval": [{"name": "Quote Approval", "method": ["PUT"]}],
        "AE": [{"name": "Pricing Calculator", "method": ["GET", "POST", "PUT"]}],
    }

    # For each tenant in the system
    for tenant in Tenant.objects.filter(is_deleted=False):
        for role_name, features in all_features.items():
            try:
                user_role = UserRole.objects.get(name=role_name, tenant_id=tenant.id)
            except UserRole.DoesNotExist:
                # If the role doesn't exist, move to the next role
                continue

            for feature in features:
                name = feature["name"]
                methods = feature["method"]

                for method in methods:
                    feature_list = FeatureList.objects.get(name=name, method=method)

                    # Check if the mapping already exists
                    mapping_exists = RoleFeatureMapping.objects.filter(
                        user_role_id=user_role.id,
                        feature_list_id=feature_list.id
                    ).exists()

                    if not mapping_exists:
                        RoleFeatureMapping.objects.create(
                            user_role_id=user_role,
                            feature_list_id=feature_list
                        )

            logger.info(f"Processed role {role_name} for tenant {tenant.id}")

        logger.info(f"Processed tenant {tenant.id}")


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0088_alter_contracttemplate_s3_pdf_file_path"),
    ]

    operations = [
        migrations.RunPython(seed_missing_mappings, reverse_code=migrations.RunPython.noop)
    ]
